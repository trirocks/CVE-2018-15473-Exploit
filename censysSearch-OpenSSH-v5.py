#v5 get 80.http.get.title -20180103
import sys
reload(sys)
sys.setdefaultencoding("utf8")
import json
import requests
import math

API_URL = "https://www.censys.io/api/v1"
UID = ""
SECRET = ""

PAGES = 100
cur_page = 1
thread_num = 20

# --- get pagenum of a query --- #
def get_pagenum(query):
    data = {
                "query":query, 
                "page":1, 
                "fields":["ip"]
            }        
    try:
        res = requests.post(API_URL + "/search/ipv4", data=json.dumps(data), auth=(UID, SECRET))
    except:
        pass
    try:
        results = res.json()
    except:
        pass
    if res.status_code != 200:
        print "error occurred: %s" % results["error"]
        sys.exit(1)
    print "Total_count:%s" % (results["metadata"]["count"])

    matches = results['metadata']['count']
    pagenum = matches / 100
    if matches % 100 != 0:
        pagenum += 1

    return pagenum

def getIps(query, page):
    iplist = ""
    data = {
        "query":query, 
        "page":page, 
        "fields":["ip","protocols","80.http.get.title","autonomous_system.asn","autonomous_system.organization","autonomous_system.name","location.country","location.city"]
    }
    try:
        res = requests.post(API_URL + "/search/ipv4", data=json.dumps(data), auth=(UID, SECRET))
    except:
        pass
    else:
        try:
            results = res.json()
        except:
            pass
        else:
            if res.status_code != 200:
                print "error occurred: %s" % results["error"]
                sys.exit(1)
            else:
                result_iter = iter(results["results"])
                for result in result_iter:
                    ip = result["ip"]    
                    protocols = result["protocols"]
                    tmp = ""
                    for x in protocols:
                        tmp += x 
                        tmp += "_" 
#                    asn = result["autonomous_system.asn"]
#                    organization = result["autonomous_system.organization"].replace(",", "")
#                    name = result["autonomous_system.name"]
#                    country = result["location.country"]
#                    city = result["location.city"]
                    result.setdefault("80.http.get.title","Unkown")
                    title = result.get("80.http.get.title")

                    result.setdefault("autonomous_system.asn",0)
                    asn = result.get("autonomous_system.asn")

                    result.setdefault("autonomous_system.organization","Unkown")
                    organization = result.get("autonomous_system.organization").replace(",", "")

                    result.setdefault("autonomous_system.name","Unkown")
                    name = result.get("autonomous_system.name")

                    result.setdefault("location.country","Unkown")
                    country = result.get("location.country")

                    result.setdefault("location.city","Unkown")
                    city = result.get("location.city")
                    iplist += ip +","+ tmp.strip("_") + "," + title.strip(",") + "," + str(asn) + "," + organization + "," + name + "," + country + "," + city + "\n"
    print iplist
    return iplist


if __name__ == '__main__':
    if len(sys.argv) < 1 :
        print """
usage: 
    using python censysSearch-v5.py [countrycode] to scan the hosts
    in the country you set
    
    using python censysSearch-v5.py ALL to scan the whole world
        """
        sys.exit()
    else:
        country = sys.argv[1]
        asn = sys.argv[2]
        if country == "ALL":
            query = "22.ssh.v2.banner.raw:\"SSH-2.0-OpenSSH\""
            save_ips_filename = "censys_OpenSSH_ips.txt"
        else:
            query = "((22.ssh.v2.banner.raw:\"SSH-2.0-OpenSSH\") AND location.country_code:%s) AND autonomous_system.asn:%s" % (country,asn)
            save_ips_filename = "censys_OpenSSH_%s_%s.txt" % (country,asn)
    #------------------get page number------------------------#
    PAGES = get_pagenum(query)
    try:
        save_ips = open(save_ips_filename, "w")
    except IOError as err:
        print "[!] Error: %s" % err
        sys.exit(0)
    save_ips.write("ip,protocols,title,asn,as.organization,as.name,location.country,location.city\n")
    save_ips.flush()

    #------------------get every page and save to file------------------------#

    cur_page = 1
    while cur_page <= PAGES:
        print "--------------------getting page %s-------------------" % cur_page
        iplist = getIps(query,page=cur_page)
        try:
            save_ips.write(iplist)
            save_ips.flush()
        except IOError as err:
            print "[!] Error: %s" % err
        cur_page += 1
    save_ips.close()

